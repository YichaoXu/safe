#!/usr/bin/env python3

import sys, getopt, csv, sqlite3
from pathlib import Path

if __name__ != '__main__': exit(1)
print('⚠️ START TO CONVERT INTO SQLITE ⚠️')
opts, _ = getopt.getopt(sys.argv[1:],"j:",["javascript="])

javascript = None
for opt, val in opts: 
    if opt in ['-j', '--javascript']: javascript = val 
if javascript is None: raise Exception("INVALID ARGSs")
Path(f'{javascript}.db').touch()

create_nodes_table = ''' CREATE TABLE IF NOT EXISTS main.NodeTable(
    id                VARCHAR(64)             PRIMARY KEY,
    labels            VARCHAR(64),    
    type              VARCHAR(64), 
    flags             VARCHAR(1024), 
    lineno            VARCHAR(64), 
    code              TEXT, 
    childnum          VARCHAR(64),
    funcid            VARCHAR(64),
    classname         VARCHAR(64), 
    namespace         VARCHAR(128), 
    endlineno         VARCHAR(64), 
    name              VARCHAR(1024), 
    doccomment        TEXT
);'''

create_edges_table = ''' CREATE TABLE IF NOT EXISTS main.EdgeTable(
    start               VARCHAR(64),
    end                 VARCHAR(64),
    type                VARCHAR(64), 
    var                 VARCHAR(64), 
    taint_src           VARCHAR(64), 
    taint_dst           VARCHAR(64), 
    FOREIGN KEY (start) REFERENCES NodeTable(id)
    FOREIGN KEY (end) REFERENCES NodeTable(id)
);'''

is_empty_node = "SELECT COUNT(*) from main.NodeTable LIMIT 1"
is_empty_edge = "SELECT COUNT(*) from main.EdgeTable LIMIT 1"

insert_node = ''' INSERT INTO main.NodeTable(
    id, labels, type, flags, lineno, code, childnum, funcid, 
    classname, namespace, endlineno, name, doccomment
) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?); '''

insert_edge = ''' INSERT INTO main.EdgeTable(
    start, end, type, var, taint_src, taint_dst
) VALUES (?, ?, ?, ?, ?, ?); '''

connection = sqlite3.connect(f'{javascript}.db')
cursor:sqlite3.Cursor = connection.cursor()
cursor.execute(create_nodes_table)
if(not cursor.execute(is_empty_node).fetchone()[0]):
    with open(f'testnodes.csv', 'r') as csvfile:
        reader = csv.DictReader(csvfile, delimiter='\t')
        for row in reader: cursor.execute(insert_node, list(row.values()))
cursor.close()
connection.commit()
cursor = connection.cursor()
cursor.execute(create_edges_table)
if(not cursor.execute(is_empty_edge).fetchone()[0]):
    with open(f'testrels.csv', 'r') as csvfile:
        reader = csv.DictReader(csvfile, delimiter='\t')
        for row in reader: cursor.execute(insert_edge, list(row.values()))
connection.commit()
connection.close()
print('⚠️ END TO CONVERT INTO SQLITE ⚠️')

